#Assign Variables

network='192.168.6.0/24'
in_int="ens33"
out_int="ens34"

# FLUSH ALL
IPT='iptables'

$IPT -F
$IPT -F -t nat
$IPT -X

#Default Policies
$IPT -P INPUT DROP
$IPT -P OUTPUT DROP
$IPT -P FORWARD DROP

#Allow Loopback Access
#$IPT -I INPUT -i lo -j ACCEPT
#$IPT -I OUTPUT -o lo -j ACCEPT

#Allow previously established connections to continue uninterrupted
#$IPT -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
#$IPT -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT


#TASK 2

#For Router X

#1. Allow SSH connection from the Linux Router L and the network 192.168.99.0/24.

$IPT -A FORWARD -p tcp --dport 22 -s 192.168.99.0/24 -m conntrack --ctstate NEW -j ACCEPT
$IPT -A FORWARD -p tcp --dport 22 -s 172.16.99.1 -m conntrack --ctstate NEW -j ACCEPT

#2. Allow TCP network traffic initiated by your email server to the Internet. Of course you must also allow TCP network traffic that is in 
#response to your email server to go through the firewall as well.

$IPT -A FORWARD -p tcp --dport 25  -s 192.168.6.25 -m conntrack --ctstate NEW -j ACCEPT
$IPT -A FORWARD -p udp --dport 25  -s 192.168.6.25 -m conntrack --ctstate NEW -j ACCEPT

$IPT -A FORWARD -p tcp --dport 25  -d 192.168.6.25 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT 
$IPT -A FORWARD -p udp --dport 25  -d 192.168.6.25 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

#3. Allow UDP network traffic initiated by your caching-only DNS server to the Internet. Of course you must also allow UDP network traffic
#that is in response to your caching-only DNS server to go through the firewall as well.

$IPT -A FORWARD -p udp -s 192.168.6.153 -m conntrack --ctstate NEW -j ACCEPT
$IPT -A FORWARD -p udp -i $out_int -o $in_int -d 192.168.6.153 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT


#4. Log all outbound traffic initiated by your email server with a log
#prefix of “email-init”.

$IPT -A FORWARD -s 192.168.6.25 -j LOG --log-prefix "email-init"

#5. Drop and log IP address spoofing packets to your Linux Router X. (Assume your Linux kernel doesn't do it automatically.)

#$IPT -A INPUT -i $in_int ! -s 192.168.6.0/24 -j LOG --log-prefix "SPOOFED PKT "
#$IPT -A INPUT -i $in_int ! -s 192.168.6.0/24 -j DROP

#$IPT -A INPUT -i $out_int ! -s 192.168.6.0/24 -j LOG --log-prefix "SPOOFED PKT"
#$IPT -A	INPUT -i $out_int ! -s 192.168.6.0/24 -j DROP


#6. Drop and log IP address spoofing packets to your network X.

$IPT -A FORWARD -i $out_int -o $in_int ! -s $network -j LOG --log-prefix "SPOOFED PKT "
$IPT -A FORWARD -i $out_int -o $in_int ! -s $network -j DROP

#7. Reject and log IP address spoofing packets from your network X.
$IPT -A FORWARD -i $in_int -o $out_int ! -s $network -j LOG --log-prefix "SPOOFED PKT"
$IPT -A	FORWARD -i $in_int -o $out_int ! -s $network -j REJECT

#8. Drop any other packets not explicitly allowed.
#Default Policy

echo "[+] Enabling IP forwarding..."
echo 1 > /proc/sys/net/ipv4/ip_forward
       
#Routes
